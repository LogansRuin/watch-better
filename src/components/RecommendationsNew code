import React, { useEffect, useState } from 'react'
import PropTypes from 'prop-types'
import { connect } from 'react-redux'
import { Redirect } from 'react-router-dom'
import {
  Button,
  MobileStepper
} from '@material-ui/core'
import SwipeableViews from 'react-swipeable-views'
import { autoPlay } from 'react-swipeable-views-utils'
import { KeyboardArrowLeft, KeyboardArrowRight } from '@material-ui/icons'

import { RecommendationsStyles, theme } from '../style/muiStyles'
import { getMovies } from '../actions/movies'
import RecommendationDetail from './RecommendationDetail'

const AutoPlaySwipeableViews = autoPlay(SwipeableViews)

// START OF COMPONENT
const RecommendationsNew = ({ movies, info, dispatch }, ...props) => {
  const classes = RecommendationsStyles(props)
  const [redirect, setRedirect] = useState()
  const [activeStep, setActiveStep] = React.useState(0)
  const maxSteps = movies.filter(movie => movie.recommended)

  useEffect(() => {
    dispatch(getMovies())
  }, [dispatch])

  const handleClick = id => () => {
    setRedirect(id)
  }

  const handleSeeAll = () => {
    setRedirect('see')
  }

  const handleNext = () => {
    setActiveStep(prevActiveStep => prevActiveStep + 1)
  }

  const handleBack = () => {
    setActiveStep(prevActiveStep => prevActiveStep - 1)
  }

  const handleStepChange = (step) => {
    setActiveStep(step)
  }

  const renderRedirect = () => {
    if (redirect === 'see') {
      return <Redirect push to={'/movies/list'} />
    } else if (redirect) {
      return <Redirect push to={`/movie/${redirect}`} />
    }
  }

  return (
    !info.pending && (
      <>
        {redirect && renderRedirect()}
        <AutoPlaySwipeableViews
          axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}
          index={activeStep}
          onChangeIndex={handleStepChange}
          enableMouseEvents>
          {movies
            .filter(movie => movie.recommended)
            .map(movie => (
              <RecommendationDetail
                movie={movie}
                id={movie.id}
                key={movie.id}
                onClick={handleClick}
                image={`https://image.tmdb.org/t/p/w200${movie.image}`}
                title={movie.title} />
            ))}
        </AutoPlaySwipeableViews>
        <MobileStepper
          steps={10}
          position="static"
          variant="dots"
          activeStep={activeStep}
          nextButton={
            <Button size="small" onClick={handleNext} disabled={activeStep === maxSteps - 1}>
              Next
              {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}
            </Button>
          }
          backButton={
            <Button size="small" onClick={handleBack} disabled={activeStep === 0}>
              {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}
              Back
            </Button>
          } />
          <div>
            <Button variant="outlined" color="primary" className={classes.button} onClick={handleSeeAll}>SEE ALL MOVIES</Button>
          </div>
          </>
    )
  )
}

function mapStateToProps ({ movies, info }) {
  return {
    movies,
    info
  }
}

RecommendationsNew.propTypes = {
  dispatch: PropTypes.func,
  movies: PropTypes.array,
  info: PropTypes.object
}

export default connect(mapStateToProps)(RecommendationsNew)